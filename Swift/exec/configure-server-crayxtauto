#! /usr/bin/env bash

#TODO: is this best way to do this.

# we assume that $time_secs specifies the lengths of jobs 
# that should be submitted to pbs.  
#We don't really know the expected duration of R jobs, so we will come up
# with a sensible value based on $time-secs
# 
#Swift kills jobs that run for double maxwalltime, so maxwalltime should be
# > 0.5 $time_secs
# Ideally we want to run multiple jobs in each batch allocation, so we don't
# want coasters to mistakenly decide that it can't schedule a job when we 
# have most of the batch allocation left.  So we really want
# maxwalltime to be just over 0.5 $time_secs, once we round both to minutes
maxwalltime=$(( ($time_secs + 120) / 120 ))


cat >tc <<END
pbscoast  bash      /bin/bash null null ENV::PATH="$PATH";GLOBUS::maxwalltime="$maxwalltime"
END

cat >sites.xml <<END
<config>


  <pool handle="pbscoast">
    <execution provider="coaster" url="none" jobmanager="local:pbs"/>
    <filesystem provider="local" url="none"/>
    <profile namespace="env" key="R_LIBS_USER">$R_LIBS_USER</profile>
    <profile namespace="globus" key="providerAttributes">pbs.aprun;pbs.mpp;depth=$cores</profile>
    
    <profile namespace="karajan" key="jobThrottle">$throttle</profile>
    <profile namespace="karajan" key="initialScore">10000</profile>

    <!-- max number of cores in total -->
    <profile namespace="globus" key="slots">$nodes</profile>
    <profile namespace="globus" key="jobsPerNode">$cores</profile>
    
    <!-- these settings control the size of the request blocks
        put through the batch system -->
    <profile namespace="globus" key="maxNodes">1</profile>
    <profile namespace="globus" key="nodeGranularity">1</profile>
    <profile namespace="globus" key="lowOverallocation">2</profile>
    <profile namespace="globus" key="highOverallocation">2</profile>
    <profile namespace="env" key="SWIFTR_TIMEOUT">60</profile>
    <profile namespace="env" key="SWIFTR_TMP">/dev/shm/$USER/</profile>
    <profile namespace="env" key="TMPDIR">/dev/shm</profile>
    <workdirectory>/dev/shm/$USER/swiftwork</workdirectory>
    <scratch>/dev/shm/$USER/swiftscratch</scratch>

END
if [ "$project" != NONE ]; then
    cat >> sites.xml <<END
    <profile namespace="globus" key="project">$project</profile>
END
fi 
if [ "$queue" != NONE ]; then
    cat >> sites.xml <<END
    <profile namespace="globus" key="queue">$queue</profile>
END
fi

if [ "$time" != NONE ]; then
    # Hack: Add 60 seconds to time to convince to request blocks for
    # full time.
    cat >> sites.xml <<END
    <profile namespace="globus" key="maxTime">$((time_secs + 60))</profile>
END
fi

cat >> sites.xml <<END
  </pool>
</config>
END

cat >cf <<END
wrapperlog.always.transfer=false
sitedir.keep=false
execution.retries=$num_retries
lazy.errors=false
status.mode=provider
use.provider.staging=true
provider.staging.pin.swiftfiles=true
#throttle.host.submit=1
END

