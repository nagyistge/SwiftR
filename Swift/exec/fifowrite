#! /usr/bin/env bash
# Write to a fifo with a timeout, with the data specified by the -m option
# If writing from a fifo is blocked after timeout specified
# with -t option in milliseconds then this script exits with code 2.
# Note that if timeout occurs the data might be partially written to fifo

fifo=$1
shift

if [ ! -p $fifo ]
then
    echo $fifo is not a named pipe
    exit 1
fi

timeout=0
msg=""

while getopts "t:m:" OPT
do
    case $OPT in
        m)
            msg="$OPTARG";;
        t)
            if [ $OPTARG -eq $OPTARG ]; then
                timeout=$OPTARG
            else
                echo "$timeout" is not an integer
                exit 1
            fi ;;
        \?)
            echo "Invalid option: $OPTARG" ;;
    esac
done

function cleanup() {
    if [ "$tout_pid" != "" ]; then
        # stop timeout process from lingering
        kill $tout_pid &> /dev/null
    fi
    if [ "$catpid" != ""  ]; then
        kill $catpid &> /dev/null
    fi    
}

# fork off a process to read from fifo and write to
# temp file.
# echo message to fifo, fork off a process.  The remainder
# of the code handles the case where there is nothing to
# read it and echo blocks
echo -n "$msg" > "$fifo" &
catpid=$!
tout_pid=""
trap "cleanup" EXIT 1 2 3 15

if [ "$timeout" -gt 0 ];
then
    stimeout=`echo "scale=3; $timeout/1000.0" | bc`
    # fork subshell to terminate process
    (sleep "$stimeout";
    if [ 1 -eq `ps h --pid $catpid | wc -l` ]
    then
        # timeout exceeded, kill processes
        kill -15 $catpid 
    fi
    ) &> /dev/null &
    tout_pid=$!
fi

if wait $catpid
then
    catpid=""
    # cat exited normally
    cleanup
    exit 0
else
    catpid=""
    cleanup
    exit 2
fi
